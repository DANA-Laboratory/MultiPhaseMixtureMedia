/*
  C/C++ layer for external multi-phase mixture medium
*/

#include "config.h"
#include "Units.h"
#include "TestCodeGeneration.h"
#include "externalmixturemedialib.h"
#include "material.h"
#include "BaseCalculator.h"
#include "StringHelper.h"

#include <math.h>
//#include <windows.h>
//#include <stdio.h>
//#include <tchar.h>

void InitTestCodeLogging(string fileName)
{
    if (!logFile.is_open())
    {
        logFile = ofstream(fileName.c_str(), ios::app);

        if (logFile.is_open())
        {
            logFile << "/*\n";
            logFile << "This code is generated by ExternalMixtureMediaLib and can be used to create test code.\n";
            logFile << "*/\n";
        }
    }
    
    if (!logFile.is_open())
    {
        cout << "\nUnable to open file\n";
    }
}

void FinalizeTestCodeLogging()
{
    if (logFile.is_open())
    {
        logFile.close();
    }
}

void* getMaterial(const char *libraryName, const char *compounds, const char *setupInfo) {

#if (GENERATE_TEST_CODE == 1)
    // Parse settings string
    string logFileName;
    vector<string> settings = StringHelper::split(setupInfo, ';');
    for (vector<string>::iterator it = settings.begin(); it != settings.end(); it++)
    {
        pair<string,string> kv = StringHelper::split2(*it, '=');
        string key = kv.first;
        string value = kv.second;

        // check unit basis
        if (key == "CodeLogging" &&  value == "true")
        {
            InitTestCodeLogging("testcode.log");
        }
    }
#endif

    if (logFile.is_open())
    {
        // increase log counter
        logCount++;

        logFile << "// Get Material object\n";
        logFile << "void *material" << logCount << " = getMaterial(\"" << libraryName << "\", \"" << compounds << "\", \"" << setupInfo << "\");\n\n";
    }

    MaterialCalculatorSetup setup = {
        libraryName,
        compounds,
        setupInfo
    };
    Material *m = new Material(&setup);

    if (logFile.is_open())
    {
        m->_logId = logCount;
    }

    return (void*) m;
}

void closeMaterial(void* object) 
{
    if (logFile.is_open())
    {
        logFile << "closeMaterial(material" << ((Material*) object)->_logId << ");\n";
    }
    Material *mo = (Material*) object;
    delete mo;
    FinalizeTestCodeLogging();
}

double MultiPhaseMixtureMedium_averageMolarMass_X_C_impl(const double X[], size_t size_X, int X_unit, void *object)
{
    
    if (logFile.is_open())
    {
        // increase log counter
        logCount++;

        logFile << "// Call MultiPhaseMixtureMedium_averageMolarMass_X_C_impl\n";

        logFile << "// Inputs\n";
        logFile <<  "double X"				<< logCount	<<	"[] = {" ;
        for(int i = 0; i < (int) size_X; i++)
        {
            if(i > 0)
                logFile << ",";

            logFile << X[i];
        }
        logFile <<  "};\n" ;

        logFile <<  "const size_t size_X"	<< logCount	<<	" = "	<<	size_X		<< ";\n";
        logFile <<  "Units::Basis X_unit"	<< logCount	<<	" = (Units::Basis) "	<<	X_unit		<< ";\n";
        
        logFile << "double AverageMolarMass" << logCount	<<	" = ";

        logFile << "MultiPhaseMixtureMedium_averageMolarMass_X_C_impl("			            <<	"\\\n";
            logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"X"					<< logCount	<<	", \\\n";
            logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"size_X"			<< logCount	<<	", \\\n";
            logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"X_unit"			<< logCount	<<	", \\\n";
            logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"material"			<< ((Material*) object)->_logId	<<	" \\\n";
            logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	")"								<<	";\n";

        logFile << "\n";
    }

    double mm = ((Material*) object)->calculator->averageMolarMass_X(X, size_X, (Units::Basis) X_unit, ((Material*) object)->cache);

    if (logFile.is_open())
    {
        logFile << "/* Returned output\n";
        logFile << "AverageMolarMass"			<< logCount	<<	" = "						<<	mm			<< "\n";
        logFile << "*/\n";
        logFile << "\n";
    }

    return mm;
}

int MultiPhaseMixtureMedium_getNumberOfPhases_C_impl(void *object)
{
    
    if (logFile.is_open())
    {
        // increase log counter
        logCount++;

        logFile << "// Call MultiPhaseMixtureMedium_getNumberOfPhases_C_impl\n";
        
        logFile << "int numPhases" << logCount	<<	" = ";
        logFile << "MultiPhaseMixtureMedium_getNumberOfPhases_C_impl("			            <<	"\\\n";
            logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"material"			<< ((Material*) object)->_logId	<<	" \\\n";
            logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	")"								<<	";\n";

        logFile << "\n";
    }
    
    int numPhases = ((Material*) object)->calculator->getNumberOfPhases();

    if (logFile.is_open())
    {
        logFile << "/* Returned output\n";
        logFile << "numPhases"			<< logCount	<<	" = "						<<	numPhases			<< "\n";
        logFile << "*/\n";
        logFile << "\n";
    }

    return numPhases;
}

int MultiPhaseMixtureMedium_getNumberOfCompounds_C_impl(void *object)
{
    if (logFile.is_open())
    {
        // increase log counter
        logCount++;

        logFile << "// Call MultiPhaseMixtureMedium_getNumberOfCompounds_C_impl\n";
        
        logFile << "int numComp" << logCount	<<	" = ";
        
        logFile << "MultiPhaseMixtureMedium_getNumberOfCompounds_C_impl("		            <<	"\\\n";
            logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"material"			<< ((Material*) object)->_logId	<<	" \\\n";
            logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	")"								<<	";\n";

        logFile << "\n";
    }

    int numComp = ((Material*) object)->calculator->getNumberOfCompounds();

    if (logFile.is_open())
    {
        logFile << "/* Returned output\n";
        logFile << "numComp"			<< logCount	<<	" = "						<<	numComp			<< "\n";
        logFile << "*/\n";
        logFile << "\n";
    }

    return numComp;
}

void MultiPhaseMixtureMedium_calcThermoProperties_TFX_C_impl(double T, const double phaseFraction[], int F_unit, const double X[], int X_unit, int solutionType, void *object,
        double* p_overall_out, double* T_overall_out, double* d_overall_out, double* h_overall_out, double* s_overall_out,
        double d_1ph_out[], double h_1ph_out[], double s_1ph_out[], double Pr_1ph_out[], double a_1ph_out[], double beta_1ph_out[], double cp_1ph_out[], double cv_1ph_out[], double kappa_1ph_out[], double lambda_1ph_out[], double eta_1ph_out[],
        double dpdT_dN_1ph_out[], double dpdd_TN_1ph_out[],
        int* nbrOfPresentPhases_out, int* presentPhaseIndex_out, double phaseCompositions_out[], double phaseFractions_out[])
{
    ((Material*) object)->calculator->calcThermoProperties_TFX(T, phaseFraction, (Units::Basis)F_unit, X, (Units::Basis) X_unit, solutionType, ((Material*) object)->cache,
        p_overall_out, T_overall_out, d_overall_out, h_overall_out, s_overall_out,
        d_1ph_out, h_1ph_out, s_1ph_out, Pr_1ph_out, a_1ph_out, beta_1ph_out, cp_1ph_out, cv_1ph_out, kappa_1ph_out, lambda_1ph_out, eta_1ph_out,
        dpdT_dN_1ph_out, dpdd_TN_1ph_out,
        nbrOfPresentPhases_out, presentPhaseIndex_out, phaseCompositions_out, phaseFractions_out);
}

void MultiPhaseMixtureMedium_calcThermoProperties_pFX_C_impl(double p, const double phaseFraction[], int F_unit, const double X[], int X_unit, int solutionType, void *object,
        double* p_overall_out, double* T_overall_out, double* d_overall_out, double* h_overall_out, double* s_overall_out,
        double d_1ph_out[], double h_1ph_out[], double s_1ph_out[], double Pr_1ph_out[], double a_1ph_out[], double beta_1ph_out[], double cp_1ph_out[], double cv_1ph_out[], double kappa_1ph_out[], double lambda_1ph_out[], double eta_1ph_out[],
        double dpdT_dN_1ph_out[], double dpdd_TN_1ph_out[],
        int* nbrOfPresentPhases_out, int* presentPhaseIndex_out, double phaseCompositions_out[], double phaseFractions_out[])
{
    ((Material*) object)->calculator->calcThermoProperties_pFX(p, phaseFraction, (Units::Basis)F_unit, X, (Units::Basis) X_unit, solutionType, ((Material*) object)->cache,
        p_overall_out, T_overall_out, d_overall_out, h_overall_out, s_overall_out,
        d_1ph_out, h_1ph_out, s_1ph_out, Pr_1ph_out, a_1ph_out, beta_1ph_out, cp_1ph_out, cv_1ph_out, kappa_1ph_out, lambda_1ph_out, eta_1ph_out,
        dpdT_dN_1ph_out, dpdd_TN_1ph_out,
        nbrOfPresentPhases_out, presentPhaseIndex_out, phaseCompositions_out, phaseFractions_out);
}

void MultiPhaseMixtureMedium_calcThermoProperties_duX_C_impl(double d, double u, const double X[], size_t size_X, int X_unit, int phase_id, void *object,
    double* p_overall_out, double* T_overall_out, double* d_overall_out, double* h_overall_out, double* s_overall_out,
    double d_1ph_out[], double h_1ph_out[], double s_1ph_out[], double Pr_1ph_out[], double a_1ph_out[], double beta_1ph_out[], double cp_1ph_out[], double cv_1ph_out[], double kappa_1ph_out[], double lambda_1ph_out[], double eta_1ph_out[],
    double dpdT_dN_1ph_out[], double dpdd_TN_1ph_out[],
    int* nbrOfPresentPhases_out, int* presentPhaseIndex_out, double phaseCompositions_out[], double phaseFractions_out[])
{
    if (logFile.is_open())
    {
        // increase log counter
        logCount++;

        logFile << "// Call MultiPhaseMixtureMedium_calcThermoProperties_duX_C_impl\n";

        logFile << "// Inputs\n";
        logFile << "double d"				<< logCount	<<	" = "	<<	d			<< ";\n";
        logFile << "double u"				<< logCount	<<	" = "	<<	u			<< ";\n";

        logFile <<  "double X"				<< logCount	<<	"[] = {" ;
        for(int i = 0; i < (int) size_X; i++)
        {
            if(i > 0)
                logFile << ",";

            logFile << X[i];
        }
        logFile <<  "};\n" ;

        logFile <<  "const size_t size_X"	<< logCount	<<	" = "	<<	size_X		<< ";\n";
        logFile <<  "Units::Basis X_unit"	<< logCount	<<	" = (Units::Basis) "	<<	X_unit		<< ";\n";
        logFile <<  "int phase_id"			<< logCount	<<	" = "	<<	phase_id	<< ";\n";
        logFile << "\n";

        WriteOutputDeclarations();

        logFile << "MultiPhaseMixtureMedium_calcThermoProperties_duX_C_impl("			<<	"\\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"d"								<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"T"								<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"X"								<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"size_X"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"X_unit"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"phase_id"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"material"						<< ((Material*) object)->_logId	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&p_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&T_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&d_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&h_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&s_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"d_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"h_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"s_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"Pr_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"a_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"beta_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"cp_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"cv_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"kappa_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"lambda_1ph_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"eta_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"dpdT_dN_1ph_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"dpdd_TN_1ph_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&nbrOfPresentPhases_out"		<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&presentPhaseIndex_out"		<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"phaseCompositions_out"			<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"phaseFractions_out"			<< logCount	<<	" \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	")"								<<	";\n";

        logFile << "\n";
    }

    ((Material*) object)->calculator->calcThermoProperties_duX(d, u, X, size_X, (Units::Basis) X_unit, phase_id, ((Material*) object)->cache,
        p_overall_out, T_overall_out, d_overall_out, h_overall_out, s_overall_out,
        d_1ph_out, h_1ph_out, s_1ph_out, Pr_1ph_out, a_1ph_out, beta_1ph_out, cp_1ph_out, cv_1ph_out, kappa_1ph_out, lambda_1ph_out, eta_1ph_out,
        dpdT_dN_1ph_out, dpdd_TN_1ph_out,
        nbrOfPresentPhases_out, presentPhaseIndex_out, phaseCompositions_out, phaseFractions_out);

    if (logFile.is_open())
    {
        logFile << "/* Returned outputs\n";
        logFile << "p_overall_out"			<< logCount	<<	" = "						<<	*p_overall_out			<< "\n";
        logFile << "T_overall_out"			<< logCount	<<	" = "						<<	*T_overall_out			<< "\n";
        logFile << "d_overall_out"			<< logCount	<<	" = "						<<	*d_overall_out			<< "\n";
        logFile << "h_overall_out"			<< logCount	<<	" = "						<<	*h_overall_out			<< "\n";
        logFile << "s_overall_out"			<< logCount	<<	" = "						<<	*s_overall_out			<< "\n";

        WriteArrayResult(d_1ph_out, 3, "d_1ph_out");
        WriteArrayResult(h_1ph_out, 3, "h_1ph_out");
        WriteArrayResult(s_1ph_out, 3, "s_1ph_out");
        WriteArrayResult(Pr_1ph_out, 3, "Pr_1ph_out");
        WriteArrayResult(a_1ph_out, 3, "a_1ph_out");
        WriteArrayResult(beta_1ph_out, 3, "beta_1ph_out");
        WriteArrayResult(cp_1ph_out, 3, "cp_1ph_out");
        WriteArrayResult(cv_1ph_out, 3, "cv_1ph_out");
        WriteArrayResult(kappa_1ph_out, 3, "kappa_1ph_out");
        WriteArrayResult(lambda_1ph_out, 3, "lambda_1ph_out");
        WriteArrayResult(eta_1ph_out, 3, "eta_1ph_out");
        WriteArrayResult(dpdT_dN_1ph_out, 3, "dpdT_dN_1ph_out");
        WriteArrayResult(dpdd_TN_1ph_out, 3, "dpdd_TN_1ph_out");

        logFile << "nbrOfPresentPhases_out"	<< logCount	<<	" = "						<<	*nbrOfPresentPhases_out	<< "\n";
        logFile << "presentPhaseIndex_out"		<< logCount	<<	" = "						<<	*presentPhaseIndex_out	<< "\n";

        WriteArrayResult(phaseCompositions_out, 3 * (int) size_X, "phaseCompositions_out");
        WriteArrayResult(phaseFractions_out, 3 * (int) size_X, "phaseFractions_out");

        logFile << "*/\n";

        logFile << "\n";

    }
}

void MultiPhaseMixtureMedium_calcThermoProperties_phX_C_impl(double p, double h, const double X[], size_t size_X, int X_unit, int phase_id, void *object,
    double* p_overall_out, double* T_overall_out, double* d_overall_out, double* h_overall_out, double* s_overall_out,
    double d_1ph_out[], double h_1ph_out[], double s_1ph_out[], double Pr_1ph_out[], double a_1ph_out[], double beta_1ph_out[], double cp_1ph_out[], double cv_1ph_out[], double kappa_1ph_out[], double lambda_1ph_out[], double eta_1ph_out[],
    double dpdT_dN_1ph_out[], double dpdd_TN_1ph_out[],
    int* nbrOfPresentPhases_out, int* presentPhaseIndex_out, double phaseCompositions_out[], double phaseFractions_out[])
{
    if (logFile.is_open())
    {
        // increase log counter
        logCount++;

        logFile << "// Call MultiPhaseMixtureMedium_calcThermoProperties_phX_C_impl\n";

        logFile << "// Inputs\n";
        logFile << "double p"				<< logCount	<<	" = "	<<	p			<< ";\n";
        logFile << "double h"				<< logCount	<<	" = "	<<	h			<< ";\n";

        logFile << "double X"				<< logCount	<<	"[] = {" ;
        for(int i = 0; i < (int) size_X; i++)
        {
            if(i > 0)
                logFile << ",";

            logFile << X[i];
        }
        logFile <<  "};\n" ;

        logFile << "const size_t size_X"	<< logCount	<<	" = "	<<	size_X		<< ";\n";
        logFile << "Units::Basis X_unit"	<< logCount	<<	" = (Units::Basis) "	<<	X_unit		<< ";\n";
        logFile << "int phase_id"			<< logCount	<<	" = "	<<	phase_id	<< ";\n";
        logFile << "\n";

        WriteOutputDeclarations();

        logFile << "MultiPhaseMixtureMedium_calcThermoProperties_phX_C_impl("			<<	"\\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"p"								<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"h"								<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"X"								<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"size_X"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"X_unit"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"phase_id"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"material"						<< ((Material*) object)->_logId	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&p_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&T_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&d_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&h_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&s_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"d_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"h_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"s_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"Pr_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"a_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"beta_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"cp_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"cv_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"kappa_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"lambda_1ph_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"eta_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"dpdT_dN_1ph_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"dpdd_TN_1ph_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&nbrOfPresentPhases_out"		<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&presentPhaseIndex_out"		<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"phaseCompositions_out"			<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"phaseFractions_out"			<< logCount	<<	" \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	")"								<<	";\n";

        logFile << "\n";
    }

    ((Material*) object)->calculator->calcThermoProperties_phX(p, h, X, size_X, (Units::Basis) X_unit, phase_id, ((Material*) object)->cache,
        p_overall_out, T_overall_out, d_overall_out, h_overall_out, s_overall_out,
        d_1ph_out, h_1ph_out, s_1ph_out, Pr_1ph_out, a_1ph_out, beta_1ph_out, cp_1ph_out, cv_1ph_out, kappa_1ph_out, lambda_1ph_out, eta_1ph_out,
        dpdT_dN_1ph_out, dpdd_TN_1ph_out,
        nbrOfPresentPhases_out, presentPhaseIndex_out, phaseCompositions_out, phaseFractions_out);

    if (logFile.is_open())
    {
        logFile << "/* Returned outputs\n";
        logFile << "p_overall_out"			<< logCount	<<	" = "						<<	*p_overall_out			<< "\n";
        logFile << "T_overall_out"			<< logCount	<<	" = "						<<	*T_overall_out			<< "\n";
        logFile << "d_overall_out"			<< logCount	<<	" = "						<<	*d_overall_out			<< "\n";
        logFile << "h_overall_out"			<< logCount	<<	" = "						<<	*h_overall_out			<< "\n";
        logFile << "s_overall_out"			<< logCount	<<	" = "						<<	*s_overall_out			<< "\n";

        WriteArrayResult(d_1ph_out, 3, "d_1ph_out");
        WriteArrayResult(h_1ph_out, 3, "h_1ph_out");
        WriteArrayResult(s_1ph_out, 3, "s_1ph_out");
        WriteArrayResult(Pr_1ph_out, 3, "Pr_1ph_out");
        WriteArrayResult(a_1ph_out, 3, "a_1ph_out");
        WriteArrayResult(beta_1ph_out, 3, "beta_1ph_out");
        WriteArrayResult(cp_1ph_out, 3, "cp_1ph_out");
        WriteArrayResult(cv_1ph_out, 3, "cv_1ph_out");
        WriteArrayResult(kappa_1ph_out, 3, "kappa_1ph_out");
        WriteArrayResult(lambda_1ph_out, 3, "lambda_1ph_out");
        WriteArrayResult(eta_1ph_out, 3, "eta_1ph_out");
        WriteArrayResult(dpdT_dN_1ph_out, 3, "dpdT_dN_1ph_out");
        WriteArrayResult(dpdd_TN_1ph_out, 3, "dpdd_TN_1ph_out");

        logFile << "nbrOfPresentPhases_out"	<< logCount	<<	" = "						<<	*nbrOfPresentPhases_out	<< "\n";
        logFile << "presentPhaseIndex_out"		<< logCount	<<	" = "						<<	*presentPhaseIndex_out	<< "\n";

        WriteArrayResult(phaseCompositions_out, 3 * (int) size_X, "phaseCompositions_out");
        WriteArrayResult(phaseFractions_out, 3 * (int) size_X, "phaseFractions_out");

        logFile << "*/\n";

        logFile << "\n";

    }
}

void MultiPhaseMixtureMedium_calcThermoProperties_dTX_C_impl(double d, double T, const double X[], size_t size_X, int X_unit, int phase_id, void *object,
    double* p_overall_out, double* T_overall_out, double* d_overall_out, double* h_overall_out, double* s_overall_out,
    double d_1ph_out[], double h_1ph_out[], double s_1ph_out[], double Pr_1ph_out[], double a_1ph_out[], double beta_1ph_out[], double cp_1ph_out[], double cv_1ph_out[], double kappa_1ph_out[], double lambda_1ph_out[], double eta_1ph_out[],
    double dpdT_dN_1ph_out[], double dpdd_TN_1ph_out[],
    int* nbrOfPresentPhases_out, int* presentPhaseIndex_out, double phaseCompositions_out[], double phaseFractions_out[])
{
    if (logFile.is_open())
    {
        // increase log counter
        logCount++;

        logFile << "// Call MultiPhaseMixtureMedium_calcThermoProperties_dTX_C_impl\n";

        logFile << "// Inputs\n";
        logFile << "double d"				<< logCount	<<	" = "	<<	d			<< ";\n";
        logFile << "double T"				<< logCount	<<	" = "	<<	T			<< ";\n";

        logFile <<  "double X"				<< logCount	<<	"[] = {" ;
        for(int i = 0; i < (int) size_X; i++)
        {
            if(i > 0)
                logFile << ",";

            logFile << X[i];
        }
        logFile <<  "};\n" ;

        logFile <<  "const size_t size_X"	<< logCount	<<	" = "	<<	size_X		<< ";\n";
        logFile <<  "Units::Basis X_unit"	<< logCount	<<	" = (Units::Basis) "	<<	X_unit		<< ";\n";
        logFile <<  "int phase_id"			<< logCount	<<	" = "	<<	phase_id	<< ";\n";
        logFile << "\n";

        WriteOutputDeclarations();

        logFile << "MultiPhaseMixtureMedium_calcThermoProperties_dTX_C_impl("			<<	"\\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"d"								<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"T"								<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"X"								<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"size_X"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"X_unit"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"phase_id"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"material"						<< ((Material*) object)->_logId	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&p_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&T_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&d_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&h_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&s_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"d_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"h_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"s_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"Pr_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"a_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"beta_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"cp_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"cv_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"kappa_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"lambda_1ph_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"eta_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"dpdT_dN_1ph_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"dpdd_TN_1ph_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&nbrOfPresentPhases_out"		<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&presentPhaseIndex_out"		<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"phaseCompositions_out"			<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"phaseFractions_out"			<< logCount	<<	" \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	")"								<<	";\n";

        logFile << "\n";
    }

    ((Material*) object)->calculator->calcThermoProperties_dTX(d, T, X, size_X, (Units::Basis) X_unit, phase_id, ((Material*) object)->cache,
        p_overall_out, T_overall_out, d_overall_out, h_overall_out, s_overall_out,
        d_1ph_out, h_1ph_out, s_1ph_out, Pr_1ph_out, a_1ph_out, beta_1ph_out, cp_1ph_out, cv_1ph_out, kappa_1ph_out, lambda_1ph_out, eta_1ph_out,
        dpdT_dN_1ph_out, dpdd_TN_1ph_out,
        nbrOfPresentPhases_out, presentPhaseIndex_out, phaseCompositions_out, phaseFractions_out);

    if (logFile.is_open())
    {
        logFile << "/* Returned outputs\n";
        logFile << "p_overall_out"			<< logCount	<<	" = "						<<	*p_overall_out			<< "\n";
        logFile << "T_overall_out"			<< logCount	<<	" = "						<<	*T_overall_out			<< "\n";
        logFile << "d_overall_out"			<< logCount	<<	" = "						<<	*d_overall_out			<< "\n";
        logFile << "h_overall_out"			<< logCount	<<	" = "						<<	*h_overall_out			<< "\n";
        logFile << "s_overall_out"			<< logCount	<<	" = "						<<	*s_overall_out			<< "\n";

        WriteArrayResult(d_1ph_out, 3, "d_1ph_out");
        WriteArrayResult(h_1ph_out, 3, "h_1ph_out");
        WriteArrayResult(s_1ph_out, 3, "s_1ph_out");
        WriteArrayResult(Pr_1ph_out, 3, "Pr_1ph_out");
        WriteArrayResult(a_1ph_out, 3, "a_1ph_out");
        WriteArrayResult(beta_1ph_out, 3, "beta_1ph_out");
        WriteArrayResult(cp_1ph_out, 3, "cp_1ph_out");
        WriteArrayResult(cv_1ph_out, 3, "cv_1ph_out");
        WriteArrayResult(kappa_1ph_out, 3, "kappa_1ph_out");
        WriteArrayResult(lambda_1ph_out, 3, "lambda_1ph_out");
        WriteArrayResult(eta_1ph_out, 3, "eta_1ph_out");
        WriteArrayResult(dpdT_dN_1ph_out, 3, "dpdT_dN_1ph_out");
        WriteArrayResult(dpdd_TN_1ph_out, 3, "dpdd_TN_1ph_out");

        logFile << "nbrOfPresentPhases_out"	<< logCount	<<	" = "						<<	*nbrOfPresentPhases_out	<< "\n";
        logFile << "presentPhaseIndex_out"		<< logCount	<<	" = "						<<	*presentPhaseIndex_out	<< "\n";

        WriteArrayResult(phaseCompositions_out, 3 * (int) size_X, "phaseCompositions_out");
        WriteArrayResult(phaseFractions_out, 3 * (int) size_X, "phaseFractions_out");

        logFile << "*/\n";

        logFile << "\n";

    }
}

void MultiPhaseMixtureMedium_calcThermoProperties_psX_C_impl(double p, double s, const double X[], size_t size_X, int X_unit, int phase_id, void *object,
    double* p_overall_out, double* T_overall_out, double* d_overall_out, double* h_overall_out, double* s_overall_out,
    double d_1ph_out[], double h_1ph_out[], double s_1ph_out[], double Pr_1ph_out[], double a_1ph_out[], double beta_1ph_out[], double cp_1ph_out[], double cv_1ph_out[], double kappa_1ph_out[], double lambda_1ph_out[], double eta_1ph_out[],
    double dpdT_dN_1ph_out[], double dpdd_TN_1ph_out[],
    int* nbrOfPresentPhases_out, int* presentPhaseIndex_out, double phaseCompositions_out[], double phaseFractions_out[])
{
    if (logFile.is_open())
    {
        // increase log counter
        logCount++;

        logFile << "// Call MultiPhaseMixtureMedium_calcThermoProperties_psX_C_impl\n";

        logFile << "// Inputs\n";
        logFile << "double p"				<< logCount	<<	" = "	<<	p			<< ";\n";
        logFile << "double s"				<< logCount	<<	" = "	<<	s			<< ";\n";

        logFile <<  "double X"				<< logCount	<<	"[] = {" ;
        for(int i = 0; i < (int) size_X; i++)
        {
            if(i > 0)
                logFile << ",";

            logFile << X[i];
        }
        logFile <<  "};\n" ;

        logFile <<  "const size_t size_X"	<< logCount	<<	" = "	<<	size_X		<< ";\n";
        logFile <<  "Units::Basis X_unit"	<< logCount	<<	" = (Units::Basis) "	<<	X_unit		<< ";\n";
        logFile <<  "int phase_id"			<< logCount	<<	" = "	<<	phase_id	<< ";\n";
        logFile << "\n";

        WriteOutputDeclarations();

        logFile << "MultiPhaseMixtureMedium_calcThermoProperties_psX_C_impl("			<<	"\\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"p"								<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"s"								<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"X"								<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"size_X"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"X_unit"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"phase_id"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"material"						<< ((Material*) object)->_logId	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&p_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&T_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&d_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&h_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&s_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"d_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"h_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"s_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"Pr_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"a_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"beta_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"cp_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"cv_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"kappa_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"lambda_1ph_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"eta_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"dpdT_dN_1ph_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"dpdd_TN_1ph_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&nbrOfPresentPhases_out"		<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&presentPhaseIndex_out"		<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"phaseCompositions_out"			<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"phaseFractions_out"			<< logCount	<<	" \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	")"								<<	";\n";

        logFile << "\n";
    }

    ((Material*) object)->calculator->calcThermoProperties_psX(p, s, X, size_X, (Units::Basis) X_unit, phase_id, ((Material*) object)->cache,
        p_overall_out, T_overall_out, d_overall_out, h_overall_out, s_overall_out,
        d_1ph_out, h_1ph_out, s_1ph_out, Pr_1ph_out, a_1ph_out, beta_1ph_out, cp_1ph_out, cv_1ph_out, kappa_1ph_out, lambda_1ph_out, eta_1ph_out,
        dpdT_dN_1ph_out, dpdd_TN_1ph_out,
        nbrOfPresentPhases_out, presentPhaseIndex_out, phaseCompositions_out, phaseFractions_out);

    if (logFile.is_open())
    {
        logFile << "/* Returned outputs\n";
        logFile << "p_overall_out"			<< logCount	<<	" = "						<<	*p_overall_out			<< "\n";
        logFile << "T_overall_out"			<< logCount	<<	" = "						<<	*T_overall_out			<< "\n";
        logFile << "d_overall_out"			<< logCount	<<	" = "						<<	*d_overall_out			<< "\n";
        logFile << "h_overall_out"			<< logCount	<<	" = "						<<	*h_overall_out			<< "\n";
        logFile << "s_overall_out"			<< logCount	<<	" = "						<<	*s_overall_out			<< "\n";

        WriteArrayResult(d_1ph_out, 3, "d_1ph_out");
        WriteArrayResult(h_1ph_out, 3, "h_1ph_out");
        WriteArrayResult(s_1ph_out, 3, "s_1ph_out");
        WriteArrayResult(Pr_1ph_out, 3, "Pr_1ph_out");
        WriteArrayResult(a_1ph_out, 3, "a_1ph_out");
        WriteArrayResult(beta_1ph_out, 3, "beta_1ph_out");
        WriteArrayResult(cp_1ph_out, 3, "cp_1ph_out");
        WriteArrayResult(cv_1ph_out, 3, "cv_1ph_out");
        WriteArrayResult(kappa_1ph_out, 3, "kappa_1ph_out");
        WriteArrayResult(lambda_1ph_out, 3, "lambda_1ph_out");
        WriteArrayResult(eta_1ph_out, 3, "eta_1ph_out");
        WriteArrayResult(dpdT_dN_1ph_out, 3, "dpdT_dN_1ph_out");
        WriteArrayResult(dpdd_TN_1ph_out, 3, "dpdd_TN_1ph_out");

        logFile << "nbrOfPresentPhases_out"	<< logCount	<<	" = "						<<	*nbrOfPresentPhases_out	<< "\n";
        logFile << "presentPhaseIndex_out"		<< logCount	<<	" = "						<<	*presentPhaseIndex_out	<< "\n";

        WriteArrayResult(phaseCompositions_out, 3 * (int) size_X, "phaseCompositions_out");
        WriteArrayResult(phaseFractions_out, 3 * (int) size_X, "phaseFractions_out");

        logFile << "*/\n";

        logFile << "\n";

    }
}

void MultiPhaseMixtureMedium_calcThermoProperties_pTX_C_impl(double p, double T, const double X[], size_t size_X, int X_unit, int phase_id, void *object,
    double* p_overall_out, double* T_overall_out, double* d_overall_out, double* h_overall_out, double* s_overall_out,
    double d_1ph_out[], double h_1ph_out[], double s_1ph_out[], double Pr_1ph_out[], double a_1ph_out[], double beta_1ph_out[], double cp_1ph_out[], double cv_1ph_out[], double kappa_1ph_out[], double lambda_1ph_out[], double eta_1ph_out[],
    double dpdT_dN_1ph_out[], double dpdd_TN_1ph_out[],
    int* nbrOfPresentPhases_out, int* presentPhaseIndex_out, double phaseCompositions_out[], double phaseFractions_out[])
{
    if (logFile.is_open())
    {
        // increase log counter
        logCount++;

        logFile << "// Call MultiPhaseMixtureMedium_calcThermoProperties_pTX_C_impl\n";

        logFile << "// Inputs\n";
        logFile << "double p"				<< logCount	<<	" = "	<<	p			<< ";\n";
        logFile << "double T"				<< logCount	<<	" = "	<<	T			<< ";\n";

        logFile <<  "double X"				<< logCount	<<	"[] = {" ;
        for(int i = 0; i < (int) size_X; i++)
        {
            if(i > 0)
                logFile << ",";

            logFile << X[i];
        }
        logFile <<  "};\n" ;

        logFile <<  "const size_t size_X"	<< logCount	<<	" = "	<<	size_X		<< ";\n";
        logFile <<  "Units::Basis X_unit"	<< logCount	<<	" = (Units::Basis) "	<<	X_unit		<< ";\n";
        logFile <<  "int phase_id"			<< logCount	<<	" = "	<<	phase_id	<< ";\n";
        logFile << "\n";

        WriteOutputDeclarations();

        logFile << "\n";

        logFile << "MultiPhaseMixtureMedium_calcThermoProperties_pTX_C_impl("			<<	"\\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"p"								<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"T"								<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"X"								<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"size_X"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"X_unit"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"phase_id"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"material"						<< ((Material*) object)->_logId	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&p_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&T_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&d_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&h_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&s_overall_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"d_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"h_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"s_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"Pr_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"a_1ph_out"						<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"beta_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"cp_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"cv_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"kappa_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"lambda_1ph_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"eta_1ph_out"					<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"dpdT_dN_1ph_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"dpdd_TN_1ph_out"				<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&nbrOfPresentPhases_out"		<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"&presentPhaseIndex_out"		<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"phaseCompositions_out"			<< logCount	<<	", \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	"phaseFractions_out"			<< logCount	<<	" \\\n";
        logFile << "\t\t\t\t\t\t\t\t\t\t\t\t\t\t" <<	")"								<<	";\n";

        logFile << "\n";
    }

    ((Material*) object)->calculator->calcThermoProperties_pTX(p, T, X, size_X, (Units::Basis) X_unit, phase_id, ((Material*) object)->cache,
        p_overall_out, T_overall_out, d_overall_out, h_overall_out, s_overall_out,
        d_1ph_out, h_1ph_out, s_1ph_out, Pr_1ph_out, a_1ph_out, beta_1ph_out, cp_1ph_out, cv_1ph_out, kappa_1ph_out, lambda_1ph_out, eta_1ph_out,
        dpdT_dN_1ph_out, dpdd_TN_1ph_out,
        nbrOfPresentPhases_out, presentPhaseIndex_out, phaseCompositions_out, phaseFractions_out);

    if (logFile.is_open())
    {
        logFile << "/* Returned outputs\n";
        logFile << "p_overall_out"			<< logCount	<<	" = "						<<	*p_overall_out			<< "\n";
        logFile << "T_overall_out"			<< logCount	<<	" = "						<<	*T_overall_out			<< "\n";
        logFile << "d_overall_out"			<< logCount	<<	" = "						<<	*d_overall_out			<< "\n";
        logFile << "h_overall_out"			<< logCount	<<	" = "						<<	*h_overall_out			<< "\n";
        logFile << "s_overall_out"			<< logCount	<<	" = "						<<	*s_overall_out			<< "\n";

        WriteArrayResult(d_1ph_out, 3, "d_1ph_out");
        WriteArrayResult(h_1ph_out, 3, "h_1ph_out");
        WriteArrayResult(s_1ph_out, 3, "s_1ph_out");
        WriteArrayResult(Pr_1ph_out, 3, "Pr_1ph_out");
        WriteArrayResult(a_1ph_out, 3, "a_1ph_out");
        WriteArrayResult(beta_1ph_out, 3, "beta_1ph_out");
        WriteArrayResult(cp_1ph_out, 3, "cp_1ph_out");
        WriteArrayResult(cv_1ph_out, 3, "cv_1ph_out");
        WriteArrayResult(kappa_1ph_out, 3, "kappa_1ph_out");
        WriteArrayResult(lambda_1ph_out, 3, "lambda_1ph_out");
        WriteArrayResult(eta_1ph_out, 3, "eta_1ph_out");
        WriteArrayResult(dpdT_dN_1ph_out, 3, "dpdT_dN_1ph_out");
        WriteArrayResult(dpdd_TN_1ph_out, 3, "dpdd_TN_1ph_out");

        logFile << "nbrOfPresentPhases_out"	<< logCount	<<	" = "						<<	*nbrOfPresentPhases_out	<< "\n";
        logFile << "presentPhaseIndex_out"		<< logCount	<<	" = "						<<	*presentPhaseIndex_out	<< "\n";

        WriteArrayResult(phaseCompositions_out, 3 * (int) size_X, "phaseCompositions_out");
        WriteArrayResult(phaseFractions_out, 3 * (int) size_X, "phaseFractions_out");

        logFile << "*/\n";

        logFile << "\n";

    }
}

void MultiPhaseMixtureMedium_getPhaseProperties_C_impl(void *object, char** phaseLabel, char** stateOfAggregation, size_t numPossiblePhases)
{
    ((Material*) object)->calculator->getPhaseProperties(phaseLabel, stateOfAggregation, numPossiblePhases);
}