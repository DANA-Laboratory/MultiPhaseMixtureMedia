// Source file for gtests that evaluate MultiPhaseMixtureMedium_calcThermoProperties_pTX_C_impl()

#include "ExternalMultiPhaseMixtureTester.h"
#include "CalcThermoProperties.h"

#define HAVE_TEA 0

#define INPUTSPEC "pT"

static void run_test_code()
{
   /*
    This code is generated by ExternalMixtureMediaLib and can be used to create test code.
    */
    // Get Material object
    void *material1 = getMaterial("CapeOpen.FluidProp Thermo System//PCP-SAFT", "nitrogen/argon/oxygen", "UnitBasis=2;CodeLogging=true");

    // Call MultiPhaseMixtureMedium_averageMolarMass_X_C_impl
    // Inputs
    double X2[] = {1,0,0};
    const size_t size_X2 = 3;
    Units::Basis X_unit2 = (Units::Basis) 1;
    double AverageMolarMass2 = MultiPhaseMixtureMedium_averageMolarMass_X_C_impl(\
														    X2, \
														    size_X2, \
														    X_unit2, \
														    material1 \
														    );

    /* Returned output
    AverageMolarMass2 = 0.0280134
    */

    // Call MultiPhaseMixtureMedium_averageMolarMass_X_C_impl
    // Inputs
    double X3[] = {0,1,0};
    const size_t size_X3 = 3;
    Units::Basis X_unit3 = (Units::Basis) 1;
    double AverageMolarMass3 = MultiPhaseMixtureMedium_averageMolarMass_X_C_impl(\
														    X3, \
														    size_X3, \
														    X_unit3, \
														    material1 \
														    );

    /* Returned output
    AverageMolarMass3 = 0.039948
    */

    // Call MultiPhaseMixtureMedium_averageMolarMass_X_C_impl
    // Inputs
    double X4[] = {0,0,1};
    const size_t size_X4 = 3;
    Units::Basis X_unit4 = (Units::Basis) 1;
    double AverageMolarMass4 = MultiPhaseMixtureMedium_averageMolarMass_X_C_impl(\
														    X4, \
														    size_X4, \
														    X_unit4, \
														    material1 \
														    );

    /* Returned output
    AverageMolarMass4 = 0.0319988
    */

    // Get Material object
    void *material5 = getMaterial("CapeOpen.FluidProp Thermo System//PCP-SAFT", "nitrogen/argon/oxygen", "UnitBasis=2;CodeLogging=true");

    // Get Material object
    void *material6 = getMaterial("CapeOpen.FluidProp Thermo System//PCP-SAFT", "nitrogen/argon/oxygen", "UnitBasis=2;CodeLogging=true");

    // Call MultiPhaseMixtureMedium_averageMolarMass_X_C_impl
    // Inputs
    double X7[] = {1,0,0};
    const size_t size_X7 = 3;
    Units::Basis X_unit7 = (Units::Basis) 1;
    double AverageMolarMass7 = MultiPhaseMixtureMedium_averageMolarMass_X_C_impl(\
														    X7, \
														    size_X7, \
														    X_unit7, \
														    material6 \
														    );

    /* Returned output
    AverageMolarMass7 = 0.0280134
    */

    // Call MultiPhaseMixtureMedium_averageMolarMass_X_C_impl
    // Inputs
    double X8[] = {0,1,0};
    const size_t size_X8 = 3;
    Units::Basis X_unit8 = (Units::Basis) 1;
    double AverageMolarMass8 = MultiPhaseMixtureMedium_averageMolarMass_X_C_impl(\
														    X8, \
														    size_X8, \
														    X_unit8, \
														    material6 \
														    );

    /* Returned output
    AverageMolarMass8 = 0.039948
    */

    // Call MultiPhaseMixtureMedium_averageMolarMass_X_C_impl
    // Inputs
    double X9[] = {0,0,1};
    const size_t size_X9 = 3;
    Units::Basis X_unit9 = (Units::Basis) 1;
    double AverageMolarMass9 = MultiPhaseMixtureMedium_averageMolarMass_X_C_impl(\
														    X9, \
														    size_X9, \
														    X_unit9, \
														    material6 \
														    );

    /* Returned output
    AverageMolarMass9 = 0.0319988
    */

    // Get Material object
    void *material10 = getMaterial("CapeOpen.FluidProp Thermo System//PCP-SAFT", "nitrogen/argon/oxygen", "UnitBasis=2;CodeLogging=true");

    // Get Material object
    void *material11 = getMaterial("CapeOpen.FluidProp Thermo System//PCP-SAFT", "nitrogen/argon/oxygen", "UnitBasis=2;CodeLogging=true");

    // Call MultiPhaseMixtureMedium_averageMolarMass_X_C_impl
    // Inputs
    double X12[] = {1,0,0};
    const size_t size_X12 = 3;
    Units::Basis X_unit12 = (Units::Basis) 1;
    double AverageMolarMass12 = MultiPhaseMixtureMedium_averageMolarMass_X_C_impl(\
														    X12, \
														    size_X12, \
														    X_unit12, \
														    material11 \
														    );

    /* Returned output
    AverageMolarMass12 = 0.0280134
    */

    // Call MultiPhaseMixtureMedium_averageMolarMass_X_C_impl
    // Inputs
    double X13[] = {0,1,0};
    const size_t size_X13 = 3;
    Units::Basis X_unit13 = (Units::Basis) 1;
    double AverageMolarMass13 = MultiPhaseMixtureMedium_averageMolarMass_X_C_impl(\
														    X13, \
														    size_X13, \
														    X_unit13, \
														    material11 \
														    );

    /* Returned output
    AverageMolarMass13 = 0.039948
    */

    // Call MultiPhaseMixtureMedium_averageMolarMass_X_C_impl
    // Inputs
    double X14[] = {0,0,1};
    const size_t size_X14 = 3;
    Units::Basis X_unit14 = (Units::Basis) 1;
    double AverageMolarMass14 = MultiPhaseMixtureMedium_averageMolarMass_X_C_impl(\
														    X14, \
														    size_X14, \
														    X_unit14, \
														    material11 \
														    );

    /* Returned output
    AverageMolarMass14 = 0.0319988
    */

    // Call MultiPhaseMixtureMedium_calcThermoProperties_pTX_C_impl
    // Inputs
    double p15 = 100000;
    double T15 = 353.15;
    double X15[] = {0.763,0.235,0.002};
    const size_t size_X15 = 3;
    Units::Basis X_unit15 = (Units::Basis) 4;
    int phase_id15 = 0;

    // outputs
    double p_overall_out15;
    double T_overall_out15;
    double d_overall_out15;
    double h_overall_out15;
    double s_overall_out15;
    double d_1ph_out15[NUM_PHASES];
    double h_1ph_out15[NUM_PHASES];
    double s_1ph_out15[NUM_PHASES];
    double Pr_1ph_out15[NUM_PHASES];
    double a_1ph_out15[NUM_PHASES];
    double beta_1ph_out15[NUM_PHASES];
    double cp_1ph_out15[NUM_PHASES];
    double cv_1ph_out15[NUM_PHASES];
    double kappa_1ph_out15[NUM_PHASES];
    double lambda_1ph_out15[NUM_PHASES];
    double eta_1ph_out15[NUM_PHASES];
    double dpdT_dN_1ph_out15[NUM_PHASES];
    double dpdd_TN_1ph_out15[NUM_PHASES];
    int nbrOfPresentPhases_out15;
    int presentPhaseIndex_out15;
    double phaseCompositions_out15[NUM_PHASES * size_X15];
    double phaseFractions_out15[NUM_PHASES * size_X15];


    MultiPhaseMixtureMedium_calcThermoProperties_pTX_C_impl(\
														    p15, \
														    T15, \
														    X15, \
														    size_X15, \
														    X_unit15, \
														    phase_id15, \
														    material5, \
														    &p_overall_out15, \
														    &T_overall_out15, \
														    &d_overall_out15, \
														    &h_overall_out15, \
														    &s_overall_out15, \
														    d_1ph_out15, \
														    h_1ph_out15, \
														    s_1ph_out15, \
														    Pr_1ph_out15, \
														    a_1ph_out15, \
														    beta_1ph_out15, \
														    cp_1ph_out15, \
														    cv_1ph_out15, \
														    kappa_1ph_out15, \
														    lambda_1ph_out15, \
														    eta_1ph_out15, \
														    dpdT_dN_1ph_out15, \
														    dpdd_TN_1ph_out15, \
														    &nbrOfPresentPhases_out15, \
														    &presentPhaseIndex_out15, \
														    phaseCompositions_out15, \
														    phaseFractions_out15 \
														    );

    /* Returned outputs
    p_overall_out15 = 100000
    T_overall_out15 = 353.15
    d_overall_out15 = 1.02641
    h_overall_out15 = 41831.9
    s_overall_out15 = 261.524
    d_1ph_out15[3] = {1.02641,0,41831.9}
    h_1ph_out15[3] = {41831.9,0,261.524}
    s_1ph_out15[3] = {261.524,0,100000}
    Pr_1ph_out15[3] = {100000,0,394.827}
    a_1ph_out15[3] = {394.827,0,0.00283638}
    beta_1ph_out15[3] = {0.00283638,0,738.043}
    cp_1ph_out15[3] = {738.043,0,461.249}
    cv_1ph_out15[3] = {461.249,0,1.00003e-005}
    kappa_1ph_out15[3] = {1.00003e-005,0,0.0233286}
    lambda_1ph_out15[3] = {0.0233286,0,2.11102e-005}
    eta_1ph_out15[3] = {2.11102e-005,0,283.807}
    dpdT_dN_1ph_out15[3] = {283.807,0,97485.3}
    dpdd_TN_1ph_out15[3] = {97485.3,0,0.820833}
    nbrOfPresentPhases_out15 = 1
    presentPhaseIndex_out15 = 1
    phaseCompositions_out15[9] = {0.820833,0.177284,0.00188362,0,0,0,1,0,0}
    phaseFractions_out15[9] = {1,0,0,0,0,0,0,0,0}
    */

    // Get Material object
    void *material16 = getMaterial("CapeOpen.FluidProp Thermo System//PCP-SAFT", "nitrogen/argon/oxygen", "UnitBasis=2;CodeLogging=true");

    // Call MultiPhaseMixtureMedium_averageMolarMass_X_C_impl
    // Inputs
    double X17[] = {1,0,0};
    const size_t size_X17 = 3;
    Units::Basis X_unit17 = (Units::Basis) 1;
    double AverageMolarMass17 = MultiPhaseMixtureMedium_averageMolarMass_X_C_impl(\
														    X17, \
														    size_X17, \
														    X_unit17, \
														    material16 \
														    );

    /* Returned output
    AverageMolarMass17 = 0.0280134
    */

    // Call MultiPhaseMixtureMedium_averageMolarMass_X_C_impl
    // Inputs
    double X18[] = {0,1,0};
    const size_t size_X18 = 3;
    Units::Basis X_unit18 = (Units::Basis) 1;
    double AverageMolarMass18 = MultiPhaseMixtureMedium_averageMolarMass_X_C_impl(\
														    X18, \
														    size_X18, \
														    X_unit18, \
														    material16 \
														    );

    /* Returned output
    AverageMolarMass18 = 0.039948
    */

    // Call MultiPhaseMixtureMedium_averageMolarMass_X_C_impl
    // Inputs
    double X19[] = {0,0,1};
    const size_t size_X19 = 3;
    Units::Basis X_unit19 = (Units::Basis) 1;
    double AverageMolarMass19 = MultiPhaseMixtureMedium_averageMolarMass_X_C_impl(\
														    X19, \
														    size_X19, \
														    X_unit19, \
														    material16 \
														    );

    /* Returned output
    AverageMolarMass19 = 0.0319988
    */

    // Call MultiPhaseMixtureMedium_calcThermoProperties_pTX_C_impl
    // Inputs
    double p20 = 100000;
    double T20 = 353.15;
    double X20[] = {0.763,0.235,0.002};
    const size_t size_X20 = 3;
    Units::Basis X_unit20 = (Units::Basis) 4;
    int phase_id20 = 0;

    // outputs
    double p_overall_out20;
    double T_overall_out20;
    double d_overall_out20;
    double h_overall_out20;
    double s_overall_out20;
    double d_1ph_out20[NUM_PHASES];
    double h_1ph_out20[NUM_PHASES];
    double s_1ph_out20[NUM_PHASES];
    double Pr_1ph_out20[NUM_PHASES];
    double a_1ph_out20[NUM_PHASES];
    double beta_1ph_out20[NUM_PHASES];
    double cp_1ph_out20[NUM_PHASES];
    double cv_1ph_out20[NUM_PHASES];
    double kappa_1ph_out20[NUM_PHASES];
    double lambda_1ph_out20[NUM_PHASES];
    double eta_1ph_out20[NUM_PHASES];
    double dpdT_dN_1ph_out20[NUM_PHASES];
    double dpdd_TN_1ph_out20[NUM_PHASES];
    int nbrOfPresentPhases_out20;
    int presentPhaseIndex_out20;
    double phaseCompositions_out20[NUM_PHASES * size_X20];
    double phaseFractions_out20[NUM_PHASES * size_X20];


    MultiPhaseMixtureMedium_calcThermoProperties_pTX_C_impl(\
														    p20, \
														    T20, \
														    X20, \
														    size_X20, \
														    X_unit20, \
														    phase_id20, \
														    material10, \
														    &p_overall_out20, \
														    &T_overall_out20, \
														    &d_overall_out20, \
														    &h_overall_out20, \
														    &s_overall_out20, \
														    d_1ph_out20, \
														    h_1ph_out20, \
														    s_1ph_out20, \
														    Pr_1ph_out20, \
														    a_1ph_out20, \
														    beta_1ph_out20, \
														    cp_1ph_out20, \
														    cv_1ph_out20, \
														    kappa_1ph_out20, \
														    lambda_1ph_out20, \
														    eta_1ph_out20, \
														    dpdT_dN_1ph_out20, \
														    dpdd_TN_1ph_out20, \
														    &nbrOfPresentPhases_out20, \
														    &presentPhaseIndex_out20, \
														    phaseCompositions_out20, \
														    phaseFractions_out20 \
														    );

    closeMaterial(material16);
    closeMaterial(material11);
    closeMaterial(material10);
    closeMaterial(material6);
    closeMaterial(material5);
    closeMaterial(material1);

}

TEST(test_calcThermoProperties_pTX, TEST_CODE)
{
    run_test_code();
}

/* TEA Pure tests */
#if HAVE_TEA
TEST(test_calcThermoProperties_pTX, CapeOpen_TEA10_HDA_moleBasis_0)
{
    run_test_tea_pure("CapeOpen.TEA (CAPE-OPEN 1.0)//HDA", Units::MOLE);
}
#endif // HAVE_TEA

#if (FLUIDPROP == 1)
TEST(test_calcThermoProperties_pTX, FluidProp_StanMix_moleBasis_Pure_0)
{
    run_test_stanmix_pure("FluidProp.freeStanMix", INPUTSPEC, Units::MOLE);
}
TEST(test_calcThermoProperties_pTX, FluidProp_StanMix_massBasis_0)
{
    run_test_stanmix_pure("FluidProp.freeStanMix", INPUTSPEC, Units::MASS);
}
TEST(test_calcThermoProperties_pTX, FluidProp_PCPSAFT_moleBasis_0)
{
    run_test_pcpsaft_pure("FluidProp.PCP-SAFT", INPUTSPEC, Units::MOLE);
}
TEST(test_calcThermoProperties_pTX, FluidProp_PCPSAFT_massBasis_0)
{
    run_test_pcpsaft_pure("FluidProp.PCP-SAFT", INPUTSPEC, Units::MASS);
}
#endif // FLUIDPROP == 1

#if (CAPEOPEN == 1)
TEST(test_calcThermoProperties_pTX, CapeOpen_FluidProp_StanMix_moleBasis_0)
{
    run_test_stanmix_pure("CapeOpen.FluidProp Thermo System//freeStanMix", INPUTSPEC, Units::MOLE);
}
TEST(test_calcThermoProperties_pTX, CapeOpen_FluidProp_StanMix_massBasis_0)
{
    run_test_stanmix_pure("CapeOpen.FluidProp Thermo System//freeStanMix", INPUTSPEC, Units::MASS);
}
TEST(test_calcThermoProperties_pTX, CapeOpen_StanMix_moleBasis_0)
{
    run_test_stanmix_pure("CapeOpen.StanMix Thermo Property Package", INPUTSPEC, Units::MOLE);

}
TEST(test_calcThermoProperties_pTX, CapeOpen_StanMix_massBasis_0)
{
    run_test_stanmix_pure("CapeOpen.StanMix Thermo Property Package", INPUTSPEC, Units::MASS);
}
TEST(test_calcThermoProperties_pTX, CapeOpen_FluidProp_PCPSAFT_moleBasis_0)
{
    run_test_pcpsaft_pure("CapeOpen.FluidProp Thermo System//PCP-SAFT", INPUTSPEC, Units::MOLE);
}
TEST(test_calcThermoProperties_pTX, CapeOpen_FluidProp_PCPSAFT_massBasis_0)
{
    run_test_pcpsaft_pure("CapeOpen.FluidProp Thermo System//PCP-SAFT", INPUTSPEC, Units::MASS);
}
TEST(test_calcThermoProperties_pTX, CapeOpen_PCPSAFT_moleBasis_0)
{
    run_test_pcpsaft_pure("CapeOpen.PCP-SAFT Thermo Property Package", INPUTSPEC, Units::MOLE);
}
TEST(test_calcThermoProperties_pTX, CapeOpen_PCPSAFT_massBasis_0)
{
    run_test_pcpsaft_pure("CapeOpen.PCP-SAFT Thermo Property Package", INPUTSPEC, Units::MASS);
}
#endif // CAPEOPEN == 1

/*
* Mixture tests
*/
#if (FLUIDPROP == 1)
TEST(test_calcThermoProperties_pTX, FluidProp_StanMix_moleBasis_Mixture_moleFractionBasisX)
{
    Units::Basis X_unit = Units::MOLEFRACTION; // Mole based fractions
    run_test_stanmix_mixture1("FluidProp.freeStanMix", INPUTSPEC, Units::MOLE, X_unit);
}
TEST(test_calcThermoProperties_pTX, FluidProp_StanMix_moleBasis_Mixture_massFractionBasisX)
{
    Units::Basis X_unit = Units::MASSFRACTION; // Mass fraction based fractions
    run_test_stanmix_mixture1("FluidProp.freeStanMix", INPUTSPEC, Units::MOLE, X_unit);
}
TEST(test_calcThermoProperties_pTX, FluidProp_StanMix_moleBasis_Mixture_moleBasisX)
{
    Units::Basis X_unit = Units::MOLE; // Mass fraction based fractions
    run_test_stanmix_mixture1("FluidProp.freeStanMix", INPUTSPEC, Units::MOLE, X_unit);
}
TEST(test_calcThermoProperties_pTX, FluidProp_StanMix_moleBasis_Mixture_massBasisX)
{
    Units::Basis X_unit = Units::MASS; // Mass fraction based fractions
    run_test_stanmix_mixture1("FluidProp.freeStanMix", INPUTSPEC, Units::MOLE, X_unit);
}
TEST(test_calcThermoProperties_pTX, FluidProp_StanMix_moleBasis_Mixture_moleFractionBasisX_1)
{
    Units::Basis X_unit = Units::MOLEFRACTION; // Mole based fractions
    run_test_stanmix_mixture2("FluidProp.freeStanMix", INPUTSPEC, Units::MOLE, X_unit);
}
TEST(test_calcThermoProperties_pTX, FluidProp_GasMix_moleBasis_Mixture_moleFractionBasisX_0)
{
    Units::Basis X_unit = Units::MOLEFRACTION; // Mole based fractions
    run_test_gasmix_mixture1("FluidProp.GasMix", INPUTSPEC, Units::MOLE, X_unit);
}
#endif // FLUIDPROP == 1

#if (CAPEOPEN == 1)
TEST(test_calcThermoProperties_pTX, CapeOpen_StanMix_moleBasis_Mixture_moleFractionBasisX_0)
{
    Units::Basis X_unit = Units::MOLEFRACTION; // Mole based fractions
    run_test_stanmix_mixture1("CapeOpen.FluidProp Thermo System//freeStanMix", INPUTSPEC, Units::MOLE, X_unit);
}
TEST(test_calcThermoProperties_pTX, CapeOpen_StanMix_massBasis_Mixture_moleFractionBasisX_0)
{
    Units::Basis X_unit = Units::MOLEFRACTION; // Mole based fractions
    run_test_stanmix_mixture1("CapeOpen.FluidProp Thermo System//freeStanMix", INPUTSPEC, Units::MASS, X_unit);
}
TEST(test_calcThermoProperties_pTX, CapeOpen_StanMix_moleBasis_Mixture_moleFractionBasisX_1)
{
    Units::Basis X_unit = Units::MOLEFRACTION; // Mole based fractions
    run_test_stanmix_mixture2("CapeOpen.FluidProp Thermo System//freeStanMix", INPUTSPEC, Units::MOLE, X_unit);
}
TEST(test_calcThermoProperties_pTX, CapeOpen_StanMix_massBasis_Mixture_moleFractionBasisX_1)
{
    Units::Basis X_unit = Units::MOLEFRACTION; // Mole based fractions
    run_test_stanmix_mixture2("CapeOpen.FluidProp Thermo System//freeStanMix", INPUTSPEC, Units::MASS, X_unit);
}
TEST(test_calcThermoProperties_pTX, CapeOpen_GasMix_moleBasis_Mixture_moleFractionBasisX_0)
{
    Units::Basis X_unit = Units::MOLEFRACTION; // Mole based fractions
    run_test_gasmix_mixture1("CapeOpen.FluidProp Thermo System//GasMix", INPUTSPEC, Units::MOLE, X_unit);
}
TEST(test_calcThermoProperties_pTX, CapeOpen_PCPSAFT_moleBasis_Mixture_moleFractionBasisX_1) 
{
    Units::Basis X_unit = Units::MOLEFRACTION; // Mole based fractions
    run_test_pcpsaft_air_mixture1("CapeOpen.FluidProp Thermo System//PCP-SAFT", INPUTSPEC, Units::MOLE, X_unit);
}
TEST(test_calcThermoProperties_pTX, CapeOpen_PCPSAFT_massBasis_Mixture_moleFractionBasisX_1) 
{
    Units::Basis X_unit = Units::MOLEFRACTION; // Mole based fractions
    run_test_pcpsaft_air_mixture1("CapeOpen.FluidProp Thermo System//PCP-SAFT", INPUTSPEC, Units::MASS, X_unit);
}
TEST(test_calcThermoProperties_pTX, CapeOpen_REFPROP_moleBasis_Mixture_moleFractionBasisX_1) 
{
    Units::Basis X_unit = Units::MOLEFRACTION; // Mole based fractions
    run_test_refprop_air_mixture1("CapeOpen.FluidProp Thermo System//RefProp", INPUTSPEC, Units::MOLE, X_unit);
}
TEST(test_calcThermoProperties_pTX, CapeOpen_REFPROP_massBasis_Mixture_moleFractionBasisX_1) 
{
    Units::Basis X_unit = Units::MOLEFRACTION; // Mole based fractions
    run_test_refprop_air_mixture1("CapeOpen.FluidProp Thermo System//RefProp", INPUTSPEC, Units::MASS, X_unit);
}
/*
TEST(test_calcThermoProperties_pTX, CapeOpen_TEA_moleBasis_Mixture_moleFractionBasisX_1)
{
    Units::Basis X_unit = Units::MOLEFRACTION; // Mole based fractions
    run_test_stanmix_mixture1("CapeOpen.TEA (CAPE-OPEN 1.0)//HDA", INPUTSPEC, Units::MOLE, X_unit);
}
*/
#endif // CAPEOPEN == 1


//static void do_RefProp_test(const char *libraryName) {
//    // Test toluene calculations in RefProp
//    const char *compounds = "toluene.fld";
//    const char *setupInfo = "UnitBasis=2";
//
//    // Inputs:
//    double p = 1e+5;
//    double T = 288.15;
//    double X[] = {1.0};
//    const size_t size_X = 1;
//    int X_unit = Units::MASS; // Mass fractions
//    int phase_id = 0;
//    void *material = getMaterial(libraryName, compounds, setupInfo);
//
//    // Outputs:
//    CALC_THERMO_PROPERTIES_OUTPUTS(size_X);
//
//    // Library call:
//    CALL_CALC_THERMO_PROPERTIES_PTX();
//
//    // Check outputs:
//    EXPECT_NEAR(1e+5, p_overall_out, ABS_P_ERROR);
//    EXPECT_NEAR(288.15, T_overall_out, ABS_T_ERROR);
//    EXPECT_NEAR(871.53, d_overall_out, ABS_D_ERROR);
//    EXPECT_NEAR(-175018.14, h_overall_out, ABS_H_ERROR);
//    EXPECT_NEAR(-522.2437, s_overall_out, ABS_S_ERROR);
//
//    closeMaterial(material);
//}

/* TODO: fix test
TEST(test_calcThermoProperties_pTX, RefProp_0) {
    do_RefProp_test("RefProp");
}
*/
#if (FLUIDPROP == 1)
/* TODO: fix test
TEST(test_calcThermoProperties_pTX, FluidProp_RefProp_0) {
    do_RefProp_test("FluidProp.RefProp");
}
*/
#endif // FLUIDPROP == 1
#if (CAPEOPEN == 1)
/* TODO: fix tests
TEST(test_calcThermoProperties_pTX, CapeOpen_FluidProp_RefProp_0) {
    do_RefProp_test("CapeOpen.FluidProp Thermo System//RefProp");
}
TEST(test_calcThermoProperties_pTX, CapeOpen_RefProp_0) {
    do_RefProp_test("CapeOpen.RefProp Thermo Property Package");
}
*/
#endif // CAPEOPEN == 1
